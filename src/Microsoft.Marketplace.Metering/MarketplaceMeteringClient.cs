// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Microsoft.Marketplace.Metering
{
    /// <summary> Metering service client. </summary>
    public class MarketplaceMeteringClient : MarketplaceMeteringClientBase, IMarketplaceMeteringClient
    {

        //private readonly ClientDiagnostics clientDiagnostics;
        private readonly HttpPipeline pipeline;
        private readonly Uri endpoint;

        /// <summary> Initializes a new instance of MarketplaceMeteringClient for mocking. </summary>
        protected MarketplaceMeteringClient()
        {
        }

        /// <summary> Initializes a new instance of MarketplaceMeteringClient. </summary>
        /// <param name="tokenCredential"> The OAuth token for making client requests. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public MarketplaceMeteringClient(TokenCredential tokenCredential, MarketplaceMeteringClientOptions options = null) : this(null, tokenCredential, options)
        {
        }
        /// <summary> Initializes a new instance of MarketplaceMeteringClient. </summary>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="tokenCredential"> The OAuth token for making client requests. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public MarketplaceMeteringClient(Uri endpoint, TokenCredential tokenCredential, MarketplaceMeteringClientOptions options = null)
        {
            endpoint ??= new Uri("https://marketplaceapi.microsoft.com/api");

            options ??= new MarketplaceMeteringClientOptions();
            this.clientDiagnostics = new Azure.Core.Pipeline.ClientDiagnostics(options);
            this.pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(tokenCredential, $"20e940b3-4c77-4b0b-9a53-9e16a1b010a7/.default"));
            this.endpoint = endpoint;
        }

        public virtual MeteringOperations Metering => new MeteringOperations(clientDiagnostics, pipeline, endpoint);
    }
}
